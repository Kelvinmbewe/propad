generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VERIFIER
  AGENT
  LANDLORD
  USER
}

enum PropertyType {
  ROOM
  COTTAGE
  HOUSE
  APARTMENT
  TOWNHOUSE
  PLOT
  LAND
  COMMERCIAL_OFFICE
  COMMERCIAL_RETAIL
  COMMERCIAL_INDUSTRIAL
  WAREHOUSE
  FARM
  MIXED_USE
  OTHER
}

enum PowerPhase {
  SINGLE
  THREE
}

enum PropertyAvailability {
  IMMEDIATE
  DATE
}

enum PropertyFurnishing {
  NONE
  PARTLY
  FULLY
}

enum Currency {
  USD
  ZWG
}

enum InvoicePurpose {
  DIRECT_AD
  PROMO_BOOST
  OTHER
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
}

enum PaymentGateway {
  PAYNOW
  STRIPE
  PAYPAL
  OFFLINE
}

enum PaymentMethodType {
  CARD
  ECOCASH
  BANK
}

enum PaymentMethodStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  REVOKED
}

enum PaymentIntentStatus {
  REQUIRES_ACTION
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum TransactionResult {
  SUCCESS
  FAILED
}

enum PropertyStatus {
  DRAFT
  PENDING_VERIFY
  VERIFIED
  UNDER_OFFER
  RENTED
  SOLD
  ARCHIVED
}

enum MediaKind {
  IMAGE
  VIDEO
}

enum VerificationMethod {
  AUTO
  CALL
  SITE
  DOCS
}

enum VerificationResult {
  PASS
  FAIL
}

enum LeadSource {
  WEB
  WHATSAPP
  FACEBOOK
  SHORTLINK
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CLOSED
}

enum AgencyMemberRole {
  OWNER
  MANAGER
  AGENT
}

enum AgencyStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum ManagementContractScope {
  LETTING_ONLY
  FULL_MANAGEMENT
}

enum ManagementFeeType {
  FLAT
  PERCENT
}

enum ManagementContractStatus {
  DRAFT
  ACTIVE
  ENDED
  TERMINATED
}

enum GeoLevel {
  COUNTRY
  PROVINCE
  CITY
  SUBURB
}

enum PendingGeoStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RewardEventType {
  LISTING_VERIFIED
  LEAD_VALID
  SALE_CONFIRMED
  BONUS_TIER
  PROMO_REBATE
}

enum ListingEventType {
  RENTED
  SOLD
  REOPENED
  DISCOUNT
  UNDER_OFFER
}

enum NotificationType {
  RENTED
  SOLD
  DISCOUNT
  REOPENED
  REWARD
  CHAT
  SYSTEM
}

enum NotificationStatus {
  SENT
  READ
  FAILED
}

enum NotificationChannel {
  EMAIL
  PUSH
  WHATSAPP
  INAPP
}

enum NotificationLogStatus {
  OK
  FAIL
}

enum OwnerType {
  USER
  AGENCY
}

enum PayoutMethod {
  ECOCASH
  BANK
  WALLET
}

enum PayoutStatus {
  REQUESTED
  REVIEW
  APPROVED
  SENT
  PAID
  FAILED
  CANCELLED
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum KycIdType {
  NATIONAL_ID
  PASSPORT
  CERT_OF_INC
}

enum WalletTransactionType {
  CREDIT
  DEBIT
}

enum WalletTransactionSource {
  REWARD_EVENT
  PROMO_SHARE
  BONUS
  PAYOUT
  ADJUSTMENT
}

enum PromoTier {
  LITE
  PLUS
  TOP
}

enum PolicyStrikeReason {
  VIEWING_FEE
  SCAM
  MISREPRESENTATION
}

enum AdvertiserStatus {
  ACTIVE
  PAUSED
  SUSPENDED
}

enum AdCreativeType {
  IMAGE
  HTML
  SCRIPT
}

enum AdPlacementPage {
  HOME
  SEARCH
  DETAIL
  ARTICLE
  GLOBAL
}

enum AdPlacementPosition {
  HEADER
  SIDEBAR
  INLINE
  FOOTER
  INTERSTITIAL
}

enum AdCampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  ENDED
}

model Country {
  id        String     @id @default(cuid())
  iso2      String     @unique
  name      String
  phoneCode String
  provinces Province[]
  cities    City[]
  suburbs   Suburb[]
  properties Property[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([name])
}

model Province {
  id        String     @id @default(cuid())
  countryId String
  name      String
  country   Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cities    City[]
  suburbs   Suburb[]
  properties Property[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([countryId, name])
  @@index([countryId, name])
}

model City {
  id         String     @id @default(cuid())
  countryId  String
  provinceId String
  name       String
  lat        Float?
  lng        Float?
  country    Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  province   Province   @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  suburbs    Suburb[]
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([provinceId, name])
  @@index([countryId])
  @@index([lat, lng])
}

model Suburb {
  id             String     @id @default(cuid())
  countryId      String
  provinceId     String
  cityId         String
  name           String
  lat            Float?
  lng            Float?
  polygonGeoJson Json?
  country        Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  province       Province   @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  city           City       @relation(fields: [cityId], references: [id], onDelete: Cascade)
  properties     Property[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@unique([cityId, name])
  @@index([countryId])
  @@index([provinceId])
  @@index([lat, lng])
}

model PendingGeo {
  id               String           @id @default(cuid())
  level            GeoLevel
  parentId         String?
  proposedName     String
  proposedByUserId String
  status           PendingGeoStatus @default(PENDING)
  mergedIntoId     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  proposedBy       User             @relation(fields: [proposedByUserId], references: [id])
  properties       Property[]

  @@index([level, status])
  @@index([parentId])
}

model User {
  id        String   @id @default(cuid())
  role      Role     @default(USER)
  name      String?
  phone     String?
  email     String?  @unique
  kycStatus String?
  status    String?
  createdAt DateTime @default(now())

  agentProfile    AgentProfile?
  landlordProfile LandlordProfile?
  propertiesOwned Property[]      @relation("AgentOwnerProperties")
  properties      Property[]      @relation("LandlordProperties")
  leads           Lead[]
  verifications   Verification[]  @relation("VerificationVerifier")
  rewardEvents    RewardEvent[]
  payouts         Payout[]
  adImpressions   AdImpression[]
  promoBoosts     PromoBoost[]
  policyStrikes   PolicyStrike[]
  agentAssignments    AgentAssignment[]    @relation("AgentAssignments")
  landlordAssignments AgentAssignment[]    @relation("LandlordAgentAssignments")
  sentMessages        PropertyMessage[]    @relation("MessageSender")
  receivedMessages    PropertyMessage[]    @relation("MessageRecipient")
  dealConfirmations   Property[]           @relation("PropertyDealConfirmer")
  agencyMemberships   AgencyMember[]
  landlordContracts   ManagementContract[] @relation("LandlordManagementContracts")
  pendingGeos         PendingGeo[]
  priceHistoryChanges PriceHistory[]       @relation("PriceHistoryChangedBy")
  discountOffersCreated DiscountOffer[]    @relation("DiscountOfferCreatedBy")
  listingEventsCreated ListingEvent[]      @relation("ListingEventCreatedBy")
  watchlistEntries     Watchlist[]
  notifications        Notification[]
  buyerInvoices        Invoice[]           @relation("InvoiceBuyerUser")
  paymentMethodStatusLogs PaymentMethodStatusLog[] @relation("PaymentMethodStatusActor")
  auditLogs            AuditLog[]          @relation("AuditLogActor")
}

model Payout {
  id        String   @id @default(cuid())
  userId    String
  amount    Decimal  @db.Decimal(18, 2)
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AgentProfile {
  userId                String @id
  bio                   String?
  rating                Float  @default(0)
  verifiedListingsCount Int    @default(0)
  leadsCount            Int    @default(0)
  strikesCount          Int    @default(0)
  kycStatus             String?

  user User @relation(fields: [userId], references: [id])
}

model LandlordProfile {
  userId      String   @id
  companyName String?
  verifiedAt  DateTime?

  user User @relation(fields: [userId], references: [id])
}

model Agency {
  id        String        @id @default(cuid())
  name      String
  licenseNo String?
  email     String?
  phone     String?
  address   String?
  logoUrl   String?
  kycStatus String?
  status    AgencyStatus  @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  members    AgencyMember[]
  contracts  ManagementContract[]
  properties Property[]
  buyerInvoices Invoice[] @relation("InvoiceBuyerAgency")

  @@index([status])
  @@index([name])
}

model AgencyMember {
  id        String           @id @default(cuid())
  agencyId  String
  userId    String
  role      AgencyMemberRole
  joinedAt  DateTime         @default(now())
  isActive  Boolean          @default(true)

  agency Agency @relation(fields: [agencyId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([agencyId, userId])
  @@index([userId, role])
}

model ManagementContract {
  id         String                     @id @default(cuid())
  agencyId   String
  landlordId String
  startAt    DateTime
  endAt      DateTime?
  scope      ManagementContractScope
  feeType    ManagementFeeType
  feeValue   Decimal                    @db.Decimal(12, 2)
  notes      String?
  status     ManagementContractStatus   @default(DRAFT)
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt

  agency   Agency @relation(fields: [agencyId], references: [id])
  landlord User   @relation("LandlordManagementContracts", fields: [landlordId], references: [id])

  @@index([agencyId, status])
  @@index([landlordId])
}

model Property {
  id             String              @id @default(cuid())
  landlordId     String?
  agentOwnerId   String?
  agencyId       String?
  countryId      String?
  provinceId     String?
  cityId         String?
  suburbId       String?
  pendingGeoId   String?
  lat            Float?
  lng            Float?
  type           PropertyType
  currency       Currency
  price          Decimal             @db.Decimal(12, 2)
  bedrooms       Int?
  bathrooms      Int?
  amenities      String[]            @default([])
  furnishing     PropertyFurnishing  @default(NONE)
  availability   PropertyAvailability @default(IMMEDIATE)
  availableFrom  DateTime?
  commercialFields Json?
  description    String?
  status         PropertyStatus      @default(DRAFT)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  verifiedAt     DateTime?
  dealConfirmedAt DateTime?
  dealConfirmedById String?
  isManaged      Boolean             @default(false)

  landlord     User?        @relation("LandlordProperties", fields: [landlordId], references: [id])
  agentOwner   User?        @relation("AgentOwnerProperties", fields: [agentOwnerId], references: [id])
  agency       Agency?      @relation(fields: [agencyId], references: [id])
  country      Country?     @relation(fields: [countryId], references: [id])
  province     Province?    @relation(fields: [provinceId], references: [id])
  city         City?        @relation(fields: [cityId], references: [id])
  suburb       Suburb?      @relation(fields: [suburbId], references: [id])
  pendingGeo   PendingGeo?  @relation(fields: [pendingGeoId], references: [id])
  dealConfirmedBy User?     @relation("PropertyDealConfirmer", fields: [dealConfirmedById], references: [id])
  media           PropertyMedia[]
  verifications   Verification[]
  leads           Lead[]
  adImpressions   AdImpression[]
  promoBoosts     PromoBoost[]
  assignments     AgentAssignment[]
  messages        PropertyMessage[]
  priceHistory    PriceHistory[]
  discountOffers  DiscountOffer[]
  listingEvents   ListingEvent[]
  watchlists      Watchlist[]
  metricsDaily    MetricListingDaily[]
  shortLinks      ShortLink[]

  @@index([status])
  @@index([countryId])
  @@index([provinceId])
  @@index([cityId])
  @@index([suburbId])
  @@index([lat, lng])
  @@index([price])
  @@index([verifiedAt])
  @@index([dealConfirmedAt])
  @@index([createdAt(sort: Desc)])
  @@index([agencyId])
  @@index([isManaged])
  @@index([status, cityId, suburbId, type, verifiedAt, updatedAt], map: "property_status_city_suburb_type_verified_updated")
}

model AgentAssignment {
  id                 String   @id @default(cuid())
  propertyId         String
  landlordId         String
  agentId            String
  serviceFeeUsdCents Int?
  landlordPaysFee    Boolean  @default(true)
  createdAt          DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id])
  landlord User     @relation("LandlordAgentAssignments", fields: [landlordId], references: [id])
  agent    User     @relation("AgentAssignments", fields: [agentId], references: [id])

  @@index([propertyId, createdAt(sort: Desc)])
}

model PropertyMessage {
  id          String   @id @default(cuid())
  propertyId  String
  senderId    String
  recipientId String
  body        String
  createdAt   DateTime @default(now())
  readAt      DateTime?

  property  Property @relation(fields: [propertyId], references: [id])
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  recipient User     @relation("MessageRecipient", fields: [recipientId], references: [id])

  @@index([propertyId, createdAt])
  @@index([recipientId, readAt])
}

model PriceHistory {
  id           String   @id @default(cuid())
  propertyId   String
  previousPrice Decimal  @db.Decimal(12, 2)
  newPrice     Decimal   @db.Decimal(12, 2)
  currency     Currency
  changedById  String
  changedAt    DateTime  @default(now())

  property Property @relation(fields: [propertyId], references: [id])
  changedBy User    @relation("PriceHistoryChangedBy", fields: [changedById], references: [id])

  @@index([propertyId, changedAt(sort: Desc)], map: "price_history_property_id_changed_at_desc")
}

model DiscountOffer {
  id          String    @id @default(cuid())
  propertyId  String
  percentOff  Decimal?  @db.Decimal(5, 2)
  amountOff   Decimal?  @db.Decimal(12, 2)
  startAt     DateTime?
  endAt       DateTime?
  reason      String?
  createdById String
  createdAt   DateTime  @default(now())

  property  Property @relation(fields: [propertyId], references: [id])
  createdBy User     @relation("DiscountOfferCreatedBy", fields: [createdById], references: [id])

  @@index([propertyId, startAt, endAt], map: "discount_offer_property_time")
}

model ListingEvent {
  id          String            @id @default(cuid())
  propertyId  String
  type        ListingEventType
  createdById String
  createdAt   DateTime          @default(now())
  metaJson    Json?

  property  Property @relation(fields: [propertyId], references: [id])
  createdBy User     @relation("ListingEventCreatedBy", fields: [createdById], references: [id])

  @@index([propertyId, createdAt(sort: Desc)], map: "listing_event_property_id_created_at_desc")
}

model Watchlist {
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@id([userId, propertyId])
  @@index([userId, propertyId], map: "watchlist_user_id_property_id")
}

model Notification {
  id        String            @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  body      String
  url       String?
  status    NotificationStatus @default(SENT)
  createdAt DateTime           @default(now())
  readAt    DateTime?

  user    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs    NotificationLog[]

  @@index([userId, createdAt(sort: Desc)])
}

model NotificationLog {
  id             String                 @id @default(cuid())
  notificationId String
  channel        NotificationChannel
  providerId     String?
  status         NotificationLogStatus
  payloadJson    Json?
  createdAt      DateTime              @default(now())

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId, channel, createdAt])
}

model MetricListingDaily {
  listingId        String
  day              DateTime
  impressions      Int      @default(0)
  clicks           Int      @default(0)
  sessions         Int      @default(0)
  saves            Int      @default(0)
  qualifiedLeads   Int      @default(0)
  dwellSeconds     Int      @default(0)

  property Property @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([listingId, day])
  @@index([listingId, day], map: "metric_listing_daily_listing_id_day")
}

model AppConfig {
  key       String   @id
  jsonValue Json
  updatedAt DateTime @updatedAt
}

model PropertyMedia {
  id         String  @id @default(cuid())
  propertyId String
  url        String
  kind       MediaKind
  exifJson   Json?
  hasGps     Boolean
  shotAt     DateTime?

  property Property @relation(fields: [propertyId], references: [id])
}

model Verification {
  id          String               @id @default(cuid())
  propertyId  String
  verifierId  String?
  method      VerificationMethod
  result      VerificationResult
  notes       String?
  evidenceUrl String?
  createdAt   DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id])
  verifier User?    @relation("VerificationVerifier", fields: [verifierId], references: [id])
}

model Lead {
  id           String     @id @default(cuid())
  propertyId   String
  userId       String?
  source       LeadSource
  channelRef   String?
  contactPhone String
  status       LeadStatus @default(NEW)
  createdAt    DateTime   @default(now())

  property Property @relation(fields: [propertyId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])

  @@index([propertyId, source])
  @@index([createdAt(sort: Desc)])
}

model RewardEvent {
  id        String           @id @default(cuid())
  agentId   String
  type      RewardEventType
  points    Int
  usdCents  Int
  refId     String?
  createdAt DateTime @default(now())

  agent User @relation(fields: [agentId], references: [id])

  @@index([agentId, createdAt(sort: Desc)])
}

model Wallet {
  id           String      @id @default(cuid())
  ownerType    OwnerType
  ownerId      String
  currency     Currency
  balanceCents Int         @default(0)
  pendingCents Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  transactions   WalletTransaction[]
  payoutRequests PayoutRequest[]
  payoutAccounts PayoutAccount[]
  @@unique([ownerType, ownerId, currency])
}

model WalletTransaction {
  id                String                   @id @default(cuid())
  walletId          String
  amountCents       Int
  type              WalletTransactionType
  source            WalletTransactionSource
  sourceId          String?
  description       String?
  availableAt       DateTime?                @default(now())
  appliedToBalance  Boolean                  @default(false)
  createdAt         DateTime                 @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id])

  @@index([walletId, createdAt(sort: Desc)])
  @@index([walletId, availableAt])
}

model PayoutAccount {
  id           String      @id @default(cuid())
  ownerType    OwnerType
  ownerId      String
  walletId     String?
  type         PayoutMethod
  displayName  String
  detailsJson  Json
  verifiedAt   DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  wallet       Wallet? @relation(fields: [walletId], references: [id])
  payoutRequests PayoutRequest[]

  @@index([ownerType, ownerId])
  @@index([walletId])
}

model KycRecord {
  id        String    @id @default(cuid())
  ownerType OwnerType
  ownerId   String
  idType    KycIdType
  idNumber  String
  docUrls   String[]
  status    KycStatus @default(PENDING)
  notes     String?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  @@index([ownerType, ownerId, status])
}

model PayoutRequest {
  id             String        @id @default(cuid())
  walletId       String
  amountCents    Int
  method         PayoutMethod
  payoutAccountId String
  status         PayoutStatus  @default(REQUESTED)
  scheduledFor   DateTime?
  txRef          String?
  receiptPdfUrl  String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  wallet        Wallet        @relation(fields: [walletId], references: [id])
  payoutAccount PayoutAccount @relation(fields: [payoutAccountId], references: [id])

  @@index([walletId, status, createdAt(sort: Desc)])
  @@index([txRef])
}

model Advertiser {
  id           String            @id @default(cuid())
  name         String
  contactEmail String?
  phone        String?
  billingInfo  Json?
  status       AdvertiserStatus @default(ACTIVE)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  campaigns   AdCampaign[]
  creatives   AdCreative[]
  impressions AdImpression[]

  @@index([status])
}

model AdCreative {
  id            String         @id @default(cuid())
  advertiserId  String
  type          AdCreativeType
  assetUrl      String?
  htmlSnippet   String?
  clickUrl      String
  width         Int
  height        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  advertiser Advertiser @relation(fields: [advertiserId], references: [id])
  flights     AdFlight[]

  @@index([advertiserId, type])
}

model AdPlacement {
  id             String           @id @default(cuid())
  code           String           @unique
  name           String
  description    String?
  allowedTypes   AdCreativeType[] @default([])
  page           AdPlacementPage
  position       AdPlacementPosition
  allowDirect    Boolean          @default(true)
  allowAdSense   Boolean          @default(false)
  policyCompliant Boolean         @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  flights     AdFlight[]
  impressions AdImpression[]
  stats       AdStat[]

  @@index([page, position])
}

model AdCampaign {
  id                   String            @id @default(cuid())
  advertiserId         String
  invoiceId            String?           @unique
  name                 String
  startAt              DateTime
  endAt                DateTime?
  targetingJson        Json?
  cpmUsdCents          Int?
  cpcUsdCents          Int?
  dailyCapImpressions  Int?
  status               AdCampaignStatus @default(DRAFT)
  rewardPoolShareBps   Int?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  advertiser Advertiser  @relation(fields: [advertiserId], references: [id])
  invoice    Invoice?     @relation("AdCampaignInvoice", fields: [invoiceId], references: [id])
  flights    AdFlight[]
  stats      AdStat[]
  impressions AdImpression[]

  @@index([advertiserId, status])
  @@index([startAt, endAt])
}

model AdFlight {
  id           String   @id @default(cuid())
  campaignId   String
  creativeId   String
  placementId  String
  weight       Int      @default(1)
  priority     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  campaign  AdCampaign @relation(fields: [campaignId], references: [id])
  creative  AdCreative @relation(fields: [creativeId], references: [id])
  placement AdPlacement @relation(fields: [placementId], references: [id])
  stats     AdStat[]
  impressions AdImpression[]

  @@index([campaignId, priority])
  @@index([placementId])
}

model AdStat {
  id           String      @id @default(cuid())
  campaignId   String
  flightId     String
  placementId  String
  date         DateTime
  impressions  Int         @default(0)
  clicks       Int         @default(0)
  revenueMicros Int        @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  campaign  AdCampaign @relation(fields: [campaignId], references: [id])
  flight    AdFlight   @relation(fields: [flightId], references: [id])
  placement AdPlacement @relation(fields: [placementId], references: [id])

  @@unique([campaignId, flightId, placementId, date])
  @@index([date])
}

model AdImpression {
  id            String   @id @default(cuid())
  propertyId    String?
  userId        String?
  advertiserId  String?
  campaignId    String?
  flightId      String?
  placementId   String?
  route         String
  source        String?
  sessionId     String
  revenueMicros Int
  createdAt     DateTime @default(now())

  property   Property?     @relation(fields: [propertyId], references: [id])
  user       User?         @relation(fields: [userId], references: [id])
  advertiser Advertiser?   @relation(fields: [advertiserId], references: [id])
  campaign   AdCampaign?   @relation(fields: [campaignId], references: [id])
  flight     AdFlight?     @relation(fields: [flightId], references: [id])
  placement  AdPlacement?  @relation(fields: [placementId], references: [id])

  @@index([campaignId, placementId, createdAt])
}

model MetricDailyAds {
  date          DateTime @id
  impressions   Int
  clicks        Int
  revenueMicros BigInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([date(sort: Desc)])
}

model MetricDailyRevenue {
  date             DateTime @id
  grossUsdCents    BigInt
  payoutsUsdCents  BigInt
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([date(sort: Desc)])
}

model MetricDailyTraffic {
  date          DateTime @id
  visits        Int
  uniqueSessions Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([date(sort: Desc)])
}

model PromoBoost {
  id         String    @id @default(cuid())
  agentId    String
  propertyId String
  invoiceId  String?   @unique
  tier       PromoTier
  startAt    DateTime
  endAt      DateTime
  usdCents   Int

  agent    User     @relation(fields: [agentId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
  invoice  Invoice? @relation("PromoBoostInvoice", fields: [invoiceId], references: [id])

  @@index([propertyId, startAt, endAt])
}

model Invoice {
  id            String         @id @default(cuid())
  buyerUserId   String?
  buyerAgencyId String?
  purpose       InvoicePurpose
  currency      Currency
  amountCents   Int
  taxCents      Int
  amountUsdCents Int
  taxUsdCents    Int
  status        InvoiceStatus  @default(DRAFT)
  dueAt         DateTime?
  issuedAt      DateTime?
  invoiceNo     String?        @unique
  pdfUrl        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fxRateId      String?

  buyerUser   User?    @relation("InvoiceBuyerUser", fields: [buyerUserId], references: [id])
  buyerAgency Agency?  @relation("InvoiceBuyerAgency", fields: [buyerAgencyId], references: [id])
  lines       InvoiceLine[]
  paymentIntents PaymentIntent[]
  transactions Transaction[]
  campaign    AdCampaign? @relation("AdCampaignInvoice")
  promoBoost  PromoBoost? @relation("PromoBoostInvoice")
  fxRate      FxRate?   @relation(fields: [fxRateId], references: [id])

  @@index([status, dueAt])
}

model InvoiceLine {
  id             String  @id @default(cuid())
  invoiceId      String
  sku            String
  description    String
  qty            Int
  unitPriceCents Int
  totalCents     Int
  metaJson       Json?

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model PaymentIntent {
  id          String              @id @default(cuid())
  invoiceId   String
  gateway     PaymentGateway
  reference   String              @unique
  amountCents Int
  currency    Currency
  status      PaymentIntentStatus @default(REQUIRES_ACTION)
  redirectUrl String?
  gatewayRef  String?
  createdAt   DateTime            @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId, gateway, status])
}

model FxRate {
  id         String   @id @default(cuid())
  base       Currency
  quote      Currency
  rateMicros Int
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  invoices Invoice[]

  @@unique([base, quote, date])
}

model Transaction {
  id             String          @id @default(cuid())
  invoiceId      String
  gateway        PaymentGateway
  externalRef    String
  amountCents    Int
  currency       Currency
  feeCents       Int             @default(0)
  netCents       Int
  result         TransactionResult
  rawWebhookJson Json?
  receiptPdfUrl  String?
  createdAt      DateTime        @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([gateway, externalRef])
}

model PaymentMethod {
  id                   String               @id @default(cuid())
  ownerType            OwnerType
  ownerId              String
  type                 PaymentMethodType
  gatewayRef           String?
  brand                String?
  last4                String?
  expMonth             Int?
  expYear              Int?
  isDefault            Boolean              @default(false)
  status               PaymentMethodStatus  @default(ACTIVE)
  recurringConsentAt   DateTime?
  recurringConsentActorId String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  statusLogs PaymentMethodStatusLog[]

  @@index([ownerType, ownerId])
  @@index([ownerType, ownerId, isDefault])
}

model PaymentMethodStatusLog {
  id              String              @id @default(cuid())
  paymentMethodId String
  fromStatus      PaymentMethodStatus?
  toStatus        PaymentMethodStatus
  reason          String?
  actorId         String?
  createdAt       DateTime            @default(now())

  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  actor         User?         @relation("PaymentMethodStatusActor", fields: [actorId], references: [id])

  @@index([paymentMethodId, createdAt(sort: Desc)])
}

model ShortLink {
  id          String   @id @default(cuid())
  code        String   @unique
  targetUrl   String
  propertyId  String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmTerm     String?
  utmContent  String?
  clicks      Int      @default(0)
  createdAt   DateTime @default(now())

  property Property? @relation(fields: [propertyId], references: [id])
}

model PolicyStrike {
  id        String              @id @default(cuid())
  agentId   String
  reason    PolicyStrikeReason
  severity  Int
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())

  agent User @relation(fields: [agentId], references: [id])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  actorId    String?
  targetType String
  targetId   String?
  metadata   Json?
  createdAt  DateTime @default(now())

  actor User? @relation("AuditLogActor", fields: [actorId], references: [id])

  @@index([targetType, targetId])
  @@index([createdAt(sort: Desc)])
}

model FeatureFlag {
  key         String   @id
  description String?
  enabled     Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}
