generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VERIFIER
  AGENT
  LANDLORD
  USER
}

enum PropertyType {
  ROOM
  COTTAGE
  HOUSE
  PLOT
  SALE
}

enum Currency {
  USD
  ZWG
}

enum PropertyStatus {
  DRAFT
  PENDING_VERIFY
  VERIFIED
  ARCHIVED
}

enum MediaKind {
  IMAGE
  VIDEO
}

enum VerificationMethod {
  AUTO
  CALL
  SITE
  DOCS
}

enum VerificationResult {
  PASS
  FAIL
}

enum LeadSource {
  WEB
  WHATSAPP
  FACEBOOK
  SHORTLINK
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CLOSED
}

enum RewardEventType {
  LISTING_VERIFIED
  LEAD_VALID
  SALE_CONFIRMED
  BONUS_TIER
  PROMO_REBATE
}

enum PayoutMethod {
  ECOCASH
  BANK
  WALLET
}

enum PayoutStatus {
  PENDING
  PAID
  FAILED
}

enum PromoTier {
  LITE
  PLUS
  TOP
}

enum PolicyStrikeReason {
  VIEWING_FEE
  SCAM
  MISREPRESENTATION
}

model User {
  id        String   @id @default(cuid())
  role      Role     @default(USER)
  name      String?
  phone     String?
  email     String?  @unique
  kycStatus String?
  status    String?
  createdAt DateTime @default(now())

  agentProfile    AgentProfile?
  landlordProfile LandlordProfile?
  propertiesOwned Property[]      @relation("AgentOwnerProperties")
  properties      Property[]      @relation("LandlordProperties")
  leads           Lead[]
  verifications   Verification[]  @relation("VerificationVerifier")
  rewardEvents    RewardEvent[]
  payouts         Payout[]
  adImpressions   AdImpression[]
  promoBoosts     PromoBoost[]
  policyStrikes   PolicyStrike[]
}

model AgentProfile {
  userId                String @id
  bio                   String?
  rating                Float  @default(0)
  verifiedListingsCount Int    @default(0)
  leadsCount            Int    @default(0)
  strikesCount          Int    @default(0)
  kycStatus             String?

  user User @relation(fields: [userId], references: [id])
}

model LandlordProfile {
  userId      String   @id
  companyName String?
  verifiedAt  DateTime?

  user User @relation(fields: [userId], references: [id])
}

model Property {
  id           String         @id @default(cuid())
  landlordId   String?
  agentOwnerId String?
  type         PropertyType
  currency     Currency
  price        Decimal        @db.Decimal(12, 2)
  city         String
  suburb       String?
  latitude     Float?
  longitude    Float?
  bedrooms     Int?
  bathrooms    Int?
  amenities    String[]       @default([])
  description  String?
  status       PropertyStatus @default(DRAFT)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  verifiedAt   DateTime?

  landlord     User?           @relation("LandlordProperties", fields: [landlordId], references: [id])
  agentOwner   User?           @relation("AgentOwnerProperties", fields: [agentOwnerId], references: [id])
  media        PropertyMedia[]
  verifications Verification[]
  leads        Lead[]
  adImpressions AdImpression[]
  promoBoosts  PromoBoost[]

  @@index([status])
  @@index([city, suburb])
  @@index([price])
  @@index([verifiedAt])
  @@index([createdAt(sort: Desc)])
}

model PropertyMedia {
  id         String  @id @default(cuid())
  propertyId String
  url        String
  kind       MediaKind
  exifJson   Json?
  hasGps     Boolean
  shotAt     DateTime?

  property Property @relation(fields: [propertyId], references: [id])
}

model Verification {
  id          String               @id @default(cuid())
  propertyId  String
  verifierId  String?
  method      VerificationMethod
  result      VerificationResult
  notes       String?
  evidenceUrl String?
  createdAt   DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id])
  verifier User?    @relation("VerificationVerifier", fields: [verifierId], references: [id])
}

model Lead {
  id           String     @id @default(cuid())
  propertyId   String
  userId       String?
  source       LeadSource
  channelRef   String?
  contactPhone String
  status       LeadStatus @default(NEW)
  createdAt    DateTime   @default(now())

  property Property @relation(fields: [propertyId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])

  @@index([propertyId, source])
  @@index([createdAt(sort: Desc)])
}

model RewardEvent {
  id        String           @id @default(cuid())
  agentId   String
  type      RewardEventType
  points    Int
  usdCents  Int
  refId     String?
  createdAt DateTime @default(now())

  agent User @relation(fields: [agentId], references: [id])

  @@index([agentId, createdAt(sort: Desc)])
}

model Payout {
  id             String        @id @default(cuid())
  agentId        String
  amountUsdCents Int
  method         PayoutMethod
  status         PayoutStatus @default(PENDING)
  txRef          String?
  createdAt      DateTime @default(now())

  agent User @relation(fields: [agentId], references: [id])
}

model AdImpression {
  id            String   @id @default(cuid())
  propertyId    String?
  userId        String?
  route         String
  source        String?
  sessionId     String
  revenueMicros Int
  createdAt     DateTime @default(now())

  property Property? @relation(fields: [propertyId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
}

model PromoBoost {
  id         String    @id @default(cuid())
  agentId    String
  propertyId String
  tier       PromoTier
  startAt    DateTime
  endAt      DateTime
  usdCents   Int

  agent    User     @relation(fields: [agentId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@index([propertyId, startAt, endAt])
}

model ShortLink {
  id          String   @id @default(cuid())
  code        String   @unique
  targetUrl   String
  propertyId  String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmTerm     String?
  utmContent  String?
  clicks      Int      @default(0)
  createdAt   DateTime @default(now())

  property Property? @relation(fields: [propertyId], references: [id])
}

model PolicyStrike {
  id        String              @id @default(cuid())
  agentId   String
  reason    PolicyStrikeReason
  severity  Int
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())

  agent User @relation(fields: [agentId], references: [id])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  actorId    String?
  targetType String
  targetId   String?
  metadata   Json?
  createdAt  DateTime @default(now())

  actor User? @relation(fields: [actorId], references: [id])

  @@index([targetType, targetId])
  @@index([createdAt(sort: Desc)])
}

model FeatureFlag {
  key         String   @id
  description String?
  enabled     Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}
